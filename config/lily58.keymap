/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define G_C_L LG(LC(LEFT))
#define G_C_R LG(LC(RIGHT))
#define A_C_D LA(LC(DEL))

#include "macros.dtsi"
#include "combos.dtsi"

&mt {
    tapping-term-ms = <175>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC DEL N1 N2 N3 N4 N5 N6 N7 N8 N9 N0>;
};

/ {

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick-tap-ms = <100>;
            global-quick-tap;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td_esc: tap_dance_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp GRAVE>, <&kp ESC>, <&kp ESC>;
        };
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp N1       &kp N2  &kp N3    &kp N4  &kp N5                        &kp N6  &kp N7   &kp N8     &kp N9   &kp N0          &kp MINUS
&kp TAB    &hm LGUI Q   &kp W   &kp E     &kp R   &kp T                         &kp Y   &kp U    &kp I      &kp O    &kp P           &kp BSLH
&kp BSPC   &kp A        &kp S   &kp D     &kp F   &kp G                         &kp H   &kp J    &kp K      &kp L    &kp SEMI        &kp SQT
&kp LSHFT  &hm LCTRL Z  &kp X   &kp C     &kp V   &kp B   &kp LCTRL  &kp RCTRL  &kp N   &kp M    &kp COMMA  &kp DOT  &hm RCTRL FSLH  &mt RSHFT RET
                                &kp LGUI  &mo 5   &mo 2   &kp RET    &kp SPACE  &mo 3   &kp DEL  &kp RALT
            >;
        };

        win_layer {
            bindings = <
&kp GRAVE  &kp N1       &kp N2  &kp N3    &kp N4  &kp N5                       &kp N6  &kp N7   &kp N8     &kp N9   &kp N0          &kp MINUS
&kp TAB    &hm LALT Q   &kp W   &kp E     &kp R   &kp T                        &kp Y   &kp U    &kp I      &kp O    &kp P           &kp BSLH
&kp BSPC   &kp A        &kp S   &kp D     &kp F   &kp G                        &kp H   &kp J    &kp K      &kp L    &hm RSHFT SEMI  &kp SQT
&kp LSHFT  &hm LCTRL Z  &kp X   &kp C     &kp V   &kp B   &kp LBKT  &kp RBKT   &kp N   &kp M    &kp COMMA  &kp DOT  &hm RCTRL FSLH  &mt RSHFT RET
                                &kp LALT  &mo 5   &mo 2   &kp RET   &kp SPACE  &mo 3   &kp DEL  &kp RGUI
            >;
        };

        lower_layer {
            bindings = <
&kp ESC  &none    &none    &none   &none   &none                   &none            &kp KP_N0  &kp KP_N0  &kp LPAR   &kp RPAR      &kp BSPC
&none    &vim_qa  &vim_wa  &none   &none   &none                   &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
&kp DEL  &none    &none    &none   &none   &none                   &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp KP_DOT
&none    &none    &none    &none   &none   &none   &none   &none   &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_EQUAL  &kp KP_DOT
                           &trans  &trans  &trans  &trans  &trans  &trans           &kp DEL    &trans
            >;
        };

        raise_layer {
            bindings = <
&kp ESC  &none         &none       &kp LT    &kp GT    &none                   &none    &kp LT    &kp GT    &none         &none        &kp BSPC
&none    &none         &none       &kp LPAR  &kp RPAR  &none                   &none    &kp LPAR  &kp RPAR  &none         &none        &none
&kp DEL  &kp KP_MINUS  &kp KP_PLUS &kp LBKT  &kp RBKT  &none                   &none    &kp LBKT  &kp RBKT  &kp KP_MINUS  &kp KP_PLUS  &none
&none    &kp UNDER     &kp EQUAL   &kp LBRC  &kp RBRC  &none   &none   &none   &none    &kp LBRC  &kp RBRC  &kp UNDER     &kp EQUAL    &none
                       &trans      &trans    &trans    &trans  &trans  &trans  &kp DEL  &trans
            >;
        };

        adjust_layer {
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1      &bt BT_SEL 2 &none   &none                   &to 0   &to 1  &none       &none       &none        &none
&reset     &bootloader  &ext_power EP_TOG &none        &none   &none                   &none   &none  &none       &none       &bootloader  &reset
&none      &kp C_BRI_DN &kp C_BRI_UP      &none        &none   &none                   &none   &none  &none       &none       &none        &none
&none      &kp C_VOL_DN &kp C_VOL_UP      &kp K_MUTE   &none   &none   &none   &none   &none   &none  &kp C_PREV  &kp C_NEXT  &kp C_PP     &none
                        &trans            &trans       &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&kp F12      &kp F1    &kp F2    &kp F3     &kp F4  &kp F5                  &kp F6    &kp F7     &kp F8     &kp F9     &kp F10  &kp F11
&kp LG(TAB)  &none     &kp UP    &none      &none   &none                   &kp HOME  &kp PG_DN  &kp PG_UP  &kp END    &none    &kp PSCRN
&kp DEL      &kp LEFT  &kp DOWN  &kp RIGHT  &none   &none                   &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT  &none    &kp A_C_D
&none        &none     &none     &none      &none   &none   &none   &none   &none     &none      &none      &none      &none    &none
                                 &trans     &trans  &trans  &trans  &trans  &trans    &kp DEL    &trans
            >;
        };

    };
};

